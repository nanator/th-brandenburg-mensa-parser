from __future__ import print_function
from datetime import datetime, timedelta
from MensaParser import MensaParser

parser = MensaParser()
#vordefinierte response in json format
def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


#----------------------------Funktionen die das Skillverhalten kontrollieren----------------------------#
#-------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------------#

def get_mensa_response():
    session_attributes = {}
    card_title = "MensaplanResponse"
    angebot = parser.get_offer_for_date(datetime.now())
    s = ""
    for x,y in angebot.items():
        s+= x + " , " + y + ".\n"

    #ersetze codes mit umlauten
    s = s.replace(r"\u00e4", r"ä")
    s = s.replace(r"\u00c4", r"Ä")
    s = s.replace(r"\u00f6", r"ö")
    s = s.replace(r"\u00d6", r"Ö")
    s = s.replace(r"\u00fc", r"ü")
    s = s.replace(r"\u00dc", r"Ü")
    s = s.replace(r"\u00df", r"ß")
    s = s.replace(r"\n", r"")

    speech_output = s
    reprompt_text = "Ich wiederhole: Ich gebe hier den Mensaplan aus."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def get_mensa_response_tomorrow():
    session_attributes = {}
    card_title = "MensaplanResponseTomorrow"
    angebot = parser.get_offer_for_date(datetime.now() + timedelta(days=1))
    s = ""
    for x, y in angebot.items():
        s += x + " , " + y + ".\n"

    #ersetze codes mit umlauten
    s = s.replace(r"\u00e4", r"ä")
    s = s.replace(r"\u00c4", r"Ä")
    s = s.replace(r"\u00f6", r"ö")
    s = s.replace(r"\u00d6", r"Ö")
    s = s.replace(r"\u00fc", r"ü")
    s = s.replace(r"\u00dc", r"Ü")
    s = s.replace(r"\u00df", r"ß")
    s = s.replace(r"\n", r"")

    speech_output = s
    reprompt_text = "Ich wiederhole: Ich gebe hier den Mensaplan aus."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def how_much_for_offer(intent):
    session_attributes = {}
    card_title = "HowMuchForOffer"
    id = int(intent["slots"]["id"]["value"]);
    prices = parser.how_much_for_offer(id);

    s = prices[0] + "€ für Studierende, " + prices[1] + "€ für Gäste\n";

    speech_output = s
    reprompt_text = "offer"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def is_vegan(intent):
    session_attributes = {}
    card_title = "IsVegan"
    id = int(intent["slots"]["id"]["value"]);
    vegan = parser.is_vegan(id)

    if(int(vegan) == 1):
        s = "Das Angebot " + str(id) + " ist vegan."
    else:
        s = "Das Angebot " + str(id) +" ist leider nicht vegan."

    speech_output = s
    reprompt_text = "is_vegan"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def is_vegetarian(intent):
    session_attributes = {}
    card_title = "IsVegetarian"
    id = int(intent["slots"]["id"]["value"]);
    vegetarian = parser.is_vegetarian(id);

    if(int(vegetarian) == 1):
        s = "Das Angebot " + str(id) + " ist vegetarisch."
    else:
        s = "Das Angebot " + str(id) + " ist leider nicht vegetarisch."

    speech_output = s
    reprompt_text = "is_vegetarian"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def is_there_vegetarian():
    session_attributes = {}
    card_title = "IsThereVegetarian"

    vegetarian = parser.is_there_vegetarian();
    s=""
    for x in vegetarian:
        s += x + ","

    s = s.replace(r"\u00e4", r"ä")
    s = s.replace(r"\u00c4", r"Ä")
    s = s.replace(r"\u00f6", r"ö")
    s = s.replace(r"\u00d6", r"Ö")
    s = s.replace(r"\u00fc", r"ü")
    s = s.replace(r"\u00dc", r"Ü")
    s = s.replace(r"\u00df", r"ß")
    s = s.replace(r"\n", r"")

    speech_output = s
    reprompt_text = "is_there_vegan"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def is_there_vegan():
    session_attributes = {}
    card_title = "IsThereVegan"

    vegan = parser.is_there_vegan();

    s=""
    for x in vegan:
        s += x + ","

    s = s.replace(r"\u00e4", r"ä")
    s = s.replace(r"\u00c4", r"Ä")
    s = s.replace(r"\u00f6", r"ö")
    s = s.replace(r"\u00d6", r"Ö")
    s = s.replace(r"\u00fc", r"ü")
    s = s.replace(r"\u00dc", r"Ü")
    s = s.replace(r"\u00df", r"ß")
    s = s.replace(r"\n", r"")

    speech_output = s
    reprompt_text = "is_there_vegan"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

#Willkommensnachricht
def get_welcome_response():
    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Mensaparser gestartet"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "I don't know if you heard me, welcome to your custom alexa application!"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

#Prüft ob die Mensa auf hat und gibt entsprechende Antwort zurück
def get_mensa_open_response():
    if (datetime.now().hour) + 1 >= 11 and (datetime.now().hour) + 1 < 14:
        speech_output = "Die Mensa hat zur Zeit geöffnet."
        reprompt_text = "Ich wiederhole: Die Mensa hat zur Zeit geöffnet."
    else:
        speech_output = "Die Mensa hat leider schon geschlossen. Öffnungszeiten sind Montag bis Freitag von 11 bis 14 Uhr"
        reprompt_text = "Ich wiederhole: Die Mensa hat leider schon geschlossen."

    session_attributes = {}
    card_title = "MensaOffen"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def is_error():
    session_attributes = {}
    card_title = "MensaOffen"
    should_end_session = False
    speech_output = "Ich konnte Sie nicht verstehen."
    reprompt_text = "Ich wiederhole: Ich konnte Sie nicht verstehen."
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

#Nachricht wenn MensaParser beendet wird
def handle_session_end_request():
    card_title = "MensaParserEnde"
    speech_output = "MensaParser beendet."
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))


# --------------- Events ------------------
#vordefinierte events, aus template

def on_session_started(session_started_request, session):
    """ Called when the session starts.
        One possible use of this function is to initialize specific
        variables from a previous state stored in an external database
    """
    # Add additional code here as needed
    pass


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """
    # Dispatch to your skill's launch message
    return get_welcome_response()


def on_intent(intent_request, session):
    #Wird aufgerufen wenn ein Intent erkannt wird.

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Alle Intents auf die reagiert werden sollen
    if intent_name == "mensaplan":
        return get_mensa_response()
    if intent_name == "mensaplan_morgen":
        return get_mensa_response_tomorrow()
    if intent_name == "mensa_open":
        return get_mensa_open_response()
    if intent_name == "price_for_offer":
        return how_much_for_offer(intent)
    if intent_name == "is_vegan":
        return is_vegan(intent)
    if intent_name == "is_vegetarian":
        return is_vegetarian(intent)
    if intent_name == "is_there_vegetarian":
        return is_there_vegetarian()
    if intent_name == "is_there_vegan":
        return is_there_vegan()
    if intent_name == "error":
        return is_error()
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.
    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("Incoming request...")

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
